
#include <bits/stdc++.h>

using namespace std;

class Node{
    public:
    int data;
    Node* left;
    Node* right;
    
    Node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
};
Node* insertIntoBst(Node* &root,int data){
    if(root==NULL){
        root=new Node(data);
        return root;
    }
    
    if(data>root->data){
        
        root->right=insertIntoBst(root->right,data);
    }else{
         root->left=insertIntoBst(root->left,data);
    }
    
    return root;
}
void takeinput(Node* &root){
    int data;
    cin>>data;
    
    while(data!=-1){
        root=insertIntoBst(root,data);
        cin>>data;
    }
}
Node* leverOrderTraversal(Node* root){
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
       Node* temp=q.front();
        q.pop();
        
        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }else{
            cout<<temp->data<<" ";
            
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
        
    }
    return root;
}
bool searchItem(Node* root,int ele){
    Node* temp=root;
    
    while(temp!=NULL){
      
        if(temp->data==ele)
        return true;
        
        if(temp->data>ele)
        temp=temp->left;
        
        if(temp->data==ele)
        temp=temp->right;
        
    }
    return false;
}
int main()
{
   Node* root=NULL;

cout<<"Enter the data for bst "<<endl;
takeinput(root);
leverOrderTraversal(root);

cout<<"search elemnt"<<endl;
int ele=27;
bool a=searchItem(root,ele);
cout<<a<<endl;
    return 0;
}
