
#include<bits/stdc++.h>
using namespace std;

class node{
     public:
    int data;
    node* left;
    node* right;
   
    node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
};

node* buildleveorder(node* root){
    queue<node*>q;
    cout<<"enter data for root:"<<endl;
    int data;
    cin>>data;
    root=new node(data);
    q.push(root);
    // q.push(NULL);
    
    while(!q.empty()){
        node* temp=q.front();
        q.pop();
        
       int left,right;
       cout<<"enter the data of left side"<<temp->data<<endl;
       cin>>left;
       
       if(left!=-1){
           temp->left=new node(left);
           q.push(temp->left);
       }
       
       cout<<"enter the data of right side"<<temp->data<<endl;
       cin>>right;
       
       if(right!=-1){
           temp->right=new node(right);
           q.push(temp->right);
       }
    }
    return root;
}
node* leverOrderTraversal(node* root){
    queue<node*>q;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        node* temp=q.front();
        q.pop();
        
        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }else{
            cout<<temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            }
                        if(temp->right){
                q.push(temp->right);
            }

        }
    }
    return root;
}

int height(node* root){
    
    if(root==NULL)
    return 0;
    
  int left=  height(root->left);
    int right=height(root->right);
    
int ht=max(left,right)+1;

return ht;
}

pair<int,int>diameterFast(node* root){
    if(root==NULL)
    {
        pair<int,int>p=make_pair(0,0);
        return p;
    }
    
    pair<int,int>left=diameterFast(root->left);
    pair<int,int>right=diameterFast(root->right);
    
    int op1=left.first;
    int op2=right.first;
    int op3=left.second + right.second;
    
    pair<int,int>ans;
    ans.first=max(op1,max(op2,op3));
    ans.second=max(left.second,right.second)+1;
    
    return ans;
    
}

int diameter(node* root){
    
    // if(root==NULL)
    // return 0;
    
    // int op1=diameter(root->left);
    // int op2=diameter(root->right);
    // int op3=height(root->left)+height(root->right)+1;
    
    // int mx=max(op3,max(op1,op2));
    
    // return mx;
    
    return diameterFast(root).first;
}

int main(){
 node* root=NULL;
 root=buildleveorder(root);
 
 cout<<endl<<endl;
//  cout<<"INORDER: "<<endl;
 leverOrderTraversal(root);
 
 int ht=height(root);
//  cout<<"ht:"<<ht<<endl;

int dt=diameter(root);
cout<<"diameter:"<<dt<<endl;

 
//  inorder(root);
}
