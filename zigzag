/******************************************************************************

//                               Online C++ Compiler.
//               Code, Compile, Run and Debug C++ program online.
// Write your code in this editor and press "Run" button to compile and execute it.

// *******************************************************************************/

// #include <bits/stdc++.h>

// using namespace std;

// class node{
//     public:
//     int data;
//     node* left;
//     node* right;
    
//     node(int d){
//         this->data=d;
//         this->left=NULL;
//         this->right=NULL;
//     }
// };

// node* BuildTree(node* root){
    
//     cout<<"Enter the data"<<endl;
//     int data;
//     cin>>data;
    
//     root=new node(data);
    
//     if(data==-1){
//         return NULL;
//     }
    
//     cout<<"Enter the data for left "<<data<<endl;
//     root->left=BuildTree(root->left);
    
//      cout<<"Enter the data for right "<<data<<endl;
//     root->right=BuildTree(root->right);
    
//     return root;
// }
// void traverse(node* root){
//     queue<node*>q;
//     q.push(root);
//     q.push(NULL);
    
//     while(!q.empty()){
//         node* temp=q.front();
//         q.pop();
        
//         if(temp==NULL){
//             cout<<endl;
//             if(!q.empty()){
//                 q.push(NULL);
//             }
//         }else{
//                 cout<<temp->data<<" ";
                
//                 if(temp->left){
//                     q.push(temp->left);
//                 }
//                 if(temp->right){
//                     q.push(temp->right);
//                 }
//             }
//     }
    
// }
// void zigzag(node* root){
    
//     vector<int>res;
//     queue<node*>q;
    
//     q.push(root);
//     q.push(NULL);
    
//     bool leftToRight=true;
//     while(!q.empty()){
//         int n=q.size();
//         vector<int>ans(n);
       
        
//         for (int i = 0; i < n; i++) {
//             node* temp=q.front();
//         q.pop();
        
//         int index=leftToRight ? i:n-i-1;
        
//         ans[index]=temp->data;
            
//             if(temp->left){
//                 q.push(temp->left);
//             }
//             if(temp->right){
//                 q.push(temp->right);
//             }
            
//         }
//         leftToRight=!leftToRight;
        
//         for(auto i:ans){
//             res.push_back(i);
//         }
        
//     }
//     for (int i = 0; i < res.size(); i++)
//         cout << res[i] << " ";
  
// }
// int main()
// {
//   node* root=NULL;
//  root=  BuildTree(root);
// // traverse(root);
// zigzag(root);
//     return 0;
// }
class Solution{
    public:
    //Function to store the zig zag order traversal of tree in a list.
    vector <int> zigZagTraversal(Node* root)
    {
        vector<int>result;
        bool lefttoright=true;
        
        queue<Node*>q;
        q.push(root);
        
        while(!q.empty()){
            int size=q.size();
            vector<int>v(size);
            
            for(int i=0;i<size;i++)
           { 
            Node* frontnode=q.front();
            q.pop();
            
            int index=lefttoright?i:size-i-1;
            v[index]=frontnode->data;
            
            if(frontnode->left){
                q.push(frontnode->left);
            }
             if(frontnode->right){
                q.push(frontnode->right);
            }
            
            }
            lefttoright=!lefttoright;
            for(auto i:v){
                result.push_back(i);
            }
            
            
        }
        return result;
    	// Code here
    }
};
